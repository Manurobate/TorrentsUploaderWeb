name: Master Branch Workflow

on:
  pull_request:
    types: [ closed ]
    branches:
      - master

jobs:
  # Build the project
  build:
    if: github.event.pull_request.head.ref == 'develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install dependencies
        run: mvn install -DskipTests

      - name: Run tests
        run: mvn test -Dparallel=none

      - name: Package the application
        run: mvn package -DskipTests

  # Release version
  create_release:
    runs-on: ubuntu-latest
    needs: build
    #    outputs:
    #      new_dev_version: ${{ steps.determine_version.outputs.new_dev_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      # Increment version depending on release type on a pull request
      - name: Determine Release Version
        id: determine_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABELS=$(curl -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels)
          if echo "$LABELS" | grep -q "release:major"; then
            RELEASE_TYPE="major"
          elif echo "$LABELS" | grep -q "release:minor"; then
            RELEASE_TYPE="minor"
          elif echo "$LABELS" | grep -q "release:patch"; then
            RELEASE_TYPE="patch"
          else
            echo "No release label found, defaulting to patch."
            RELEASE_TYPE="patch"
          fi
          echo "Release type : $RELEASE_TYPE"
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-SNAPSHOT//')
          echo "Base version : $BASE_VERSION"
          IFS='.' read -ra ADDR <<< "$BASE_VERSION"
          MAJOR=${ADDR[0]}
          MINOR=${ADDR[1]}
          PATCH=${ADDR[2]}
          if [ "$RELEASE_TYPE" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
            NEW_DEV_VERSION="$((MAJOR + 1)).0.1-SNAPSHOT"
          elif [ "$RELEASE_TYPE" == "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            NEW_DEV_VERSION="$MAJOR.$((MINOR + 1)).1-SNAPSHOT"
          elif [ "$RELEASE_TYPE" == "patch" ]; then
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            NEW_DEV_VERSION="$MAJOR.$MINOR.$((PATCH + 1))-SNAPSHOT"
          else
            echo "Invalid release type: $RELEASE_TYPE"
            exit 1
          fi
          echo "new_version : $NEW_VERSION"
          echo "new_dev_version : $NEW_DEV_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_dev_version=$NEW_DEV_VERSION" >> $GITHUB_ENV
      #          echo "new_dev_version=$NEW_DEV_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release Branch
        run: |
          git checkout -b release-branch-${{ env.new_version }}
          git push origin release-branch-${{ env.new_version }}

      - name: Perform Maven Release
        run: |
          mvn --batch-mode release:prepare release:perform -DreleaseVersion=${{ env.new_version }} -DdevelopmentVersion=${{ env.new_dev_version }} -Dgoals=clean verify -Darguments=-DskipTests
          git push origin HEAD --tags

      - name: Create Pull Request
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          PR_RESPONSE=$(curl -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"Release version ${{ env.new_version }}","head":"release-branch-${{ env.new_version }}","base":"master"}')
            PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.number')
            echo "pr_number=$PR_NUMBER" >> $GITHUB_ENV

      - name: Merge Pull Request
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.create_pr.outputs.pr_number }}
          curl -X PUT -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.pr_number }}/merge \
            -d '{"merge_method":"merge"}'

      - name: Delete Release Branch
        if: success()
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          BRANCH_NAME=release-branch-${{ env.new_version }}
          curl -X DELETE -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/heads/$BRANCH_NAME

      - name: Build and Push Docker Image to Docker Hub
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/torrentsuploaderweb:${{ env.new_version }} .
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/torrentsuploaderweb:${{ env.new_version }} ${{ secrets.DOCKER_HUB_USERNAME }}/torrentsuploaderweb:latest
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/torrentsuploaderweb:${{ env.new_version }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/torrentsuploaderweb:latest

  rebase_develop:
    if: contains(github.event.pull_request.head.ref, 'release-branch-')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Fetch all branches
        run: git fetch --all

      - name: Rebase Develop onto Master
        run: |
          git checkout develop
          git rebase origin/master
          git push origin develop --force