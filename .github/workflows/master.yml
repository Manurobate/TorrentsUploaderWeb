name: Workflow master

on:
  pull_request:
    types: [ closed ]
    branches:
      - master

jobs:
  # Build the project
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install dependencies
        run: mvn install -DskipTests

      - name: Run tests
        run: mvn test -Dparallel=none

      - name: Package the application
        run: mvn package -DskipTests

  # Release version
  create_release_pr:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      new_version: ${{ steps.determine_version.outputs.new_version }}
      new_dev_version: ${{ steps.determine_version.outputs.new_dev_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      # Increment version depending on release type on a pull request
      - name: Determine Release Version
        id: determine_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABELS=$(curl -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels)
          if echo "$LABELS" | grep -q "release:major"; then
            RELEASE_TYPE="major"
          elif echo "$LABELS" | grep -q "release:minor"; then
            RELEASE_TYPE="minor"
          elif echo "$LABELS" | grep -q "release:patch"; then
            RELEASE_TYPE="patch"
          else
            echo "No release label found, defaulting to patch."
            RELEASE_TYPE="patch"
          fi
          echo "Release type: $RELEASE_TYPE"
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-SNAPSHOT//')
          IFS='.' read -ra ADDR <<< "$BASE_VERSION"
          MAJOR=${ADDR[0]}
          MINOR=${ADDR[1]}
          PATCH=${ADDR[2]}
          if [ "$RELEASE_TYPE" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
            NEW_DEV_VERSION="$((MAJOR + 1)).0.1-SNAPSHOT"
          elif [ "$RELEASE_TYPE" == "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            NEW_DEV_VERSION="$MAJOR.$((MINOR + 1)).1-SNAPSHOT"
          elif [ "$RELEASE_TYPE" == "patch" ]; then
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            NEW_DEV_VERSION="$MAJOR.$MINOR.$((PATCH + 2))-SNAPSHOT"
          else
            echo "Invalid release type: $RELEASE_TYPE"
            exit 1
          fi
          echo "::set-output name=new_version::$NEW_VERSION"
          echo "::set-output name=new_dev_version::$NEW_DEV_VERSION"

      - name: Create Release Branch
        run: |
          git checkout -b release-branch-${{ steps.determine_version.outputs.new_version }}
          mvn versions:set -DnewVersion=${{ steps.determine_version.outputs.new_version }}
          git add pom.xml
          git commit -m "Set version to ${{ steps.determine_version.outputs.new_version }}"
          git push origin release-branch-${{ steps.determine_version.outputs.new_version }}

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"Release version '${{ steps.determine_version.outputs.new_version }}'","head":"release-branch-'${{ steps.determine_version.outputs.new_version }}'","base":"master"}'